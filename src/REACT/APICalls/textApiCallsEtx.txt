-api calls
CHATGPT only
API calls using different HTTP methods (GET, POST, PUT, DELETE) with the Fetch API
general syntax:
GET Request: Retrieves data from the server.
fetch(url)
.then(response=>response.json())
.then(data=>console.log(data))
.catch(error => console.error('Error:', error));
https://jsonplaceholder.typicode.com/users
POST Request with Fetch:Sends data to the server to create a new resource.
fetch(url,{
    method:"POST",
    headers:{
        'Content-Type' : 'application/json',
        //'Authorization': `Bearer ${accessToken}`,
    },
    body: JSON.stringify({
        key: "value"
    }),
})
.then(response=>response.json())
.then(data=>console.log(data))
.catch(error => console.error('Error:', error));
 https://jsonplaceholder.typicode.com/posts
PUT Request: Updates an existing resource on the server or create a resource at a specific URI (Uniform Resource Identifier)
fetch(url,{
    method: "PUT",
    headers: {
        'Content-Type' : 'application/json',
    },
    body: JSON.stringify({
        key: "new_value"
    }),
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));
https://jsonplaceholder.typicode.com/posts/1
DELETE Request: Deletes a resource on the server.
fetch(url,{
    method: "DELETE",
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));
 https://jsonplaceholder.typicode.com/posts/1
 PATCH Request:PATCH is used to apply partial modifications to a resource:
 fetch('https://api.example.com/update/123', {
    method: 'PATCH',
    headers: {
        'Content-Type': 'application/json',
    },
    body: JSON.stringify({ keyToUpdate: 'new_value' }),
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));
PUT VS PATCH
PUT IS FOR Complete Replacement: When a client sends a PUT request, it typically sends the entire 
updated representation of the resource.The server then replaces the existing resource with the new representation 
provided in the request.
PATCH IS FOR Partial Update: Unlike PUT, PATCH allows clients to send only the data that needs to be 
updated, rather than sending the entire resource representation.
COMMON: BOTH put and patch are designed to be idempotent, meaning that making the same 
request multiple times has the same effect as making it once.
In case when the resource is not present on the server :
PUT request is made to a URI where the resource does not exist, the server will typically create a new 
resource at that URI using the provided representation in the request body.
PATCH ,the server may choose to either create a new resource or respond with an error, depending on the 
server implementation.
A Uniform Resource Identifier (URI) is a string of characters that uniquely identifies a particular resource.
The term "URI" is often used interchangeably 
with "URL" (Uniform Resource Locator), but technically, a URL is a specific type of URI.
________________________________________________________________________________
CHATGPT only
"REpresentational State Transfer."
A REST API is a way for software applications to talk to each other over the internet.
Everything is a resource, and each resource is identified by a unique URI (Uniform Resource Identifier). 
Most common HTTP methods are Get,post, put/patch, delete.
This state representation/data/resource can take the form of JSON (JavaScript Object Notation), XML, or HTML.
-JSON is the most widely used file format because it is language-independent and can be read by
both humans and machines.
For example:

[
   {
      "userId": 1,
      "id": 1,
      "title": "sunt excepturi",
      "body": "quia et suscipit\nsuscipit recusandae consequuntur "
   },
]
or 
{
  "person": {
    "name": "Alice",
    "age": 25,
    "isStudent": false,
    "grades": [95, 87, 92],
    "address": {
      "city": "Exampleville",
      "zipCode": "12345"
    }
  }
}
Data Structure: JSON supports two primary data structures:\
Object: An unordered collection of key-value pairs enclosed in curly braces {}.
Array: An ordered list of values enclosed in square brackets [].
Key-Value Pairs: Data is represented as key-value pairs.
The key is a STRING enclosed in double quotes, followed by a colon, and then the associated value.
JSON supports various data types, including strings, numbers, booleans, null, objects, and arrays.
You can iterate through its keys and values using a for...in loop
and data type can be object / array by checking Array.isArray
________________________________________________________________________________
-Content-Type
CHATGPT only
The Content-Type header in an HTTP request
indicates the type of data that is being sent in the body of the request. It informs the server.
headers: {
  'Content-Type': 'application/json', sending JSON data in the request body
  'Content-Type': 'application/x-www-form-urlencoded', when submitting form data in the request body.
  'Content-Type': 'multipart/form-data',when submitting binary data, files, or a combination of text and binary data.
  'Content-Type': 'text/plain',when sending plain text without any specific format.
}
________________________________________________________________________________
-json()
CHATGPT only
.json() function is a method used with the Fetch API to extract the JSON body content from a response.
o parse the response body as JSON. It returns a Promise that resolves to the JavaScript object
represented by the JSON string. 
-JSON.stringify():
methods provided by the JavaScript JSON object
to convert a JavaScript object into a JSON string.
JSON.parse():
method is used to convert a JSON string into a JavaScript object
    // example to JSON.stringify() and JSON.parse()
    const obj = { key1: 1, key2: 'value2' };
    const jsonString = JSON.stringify(obj);
    console.log(jsonString);
    // Output: '{"key1":"value1","key2":"value2"}'
    console.log(JSON.parse(jsonString))
    //Output: {key1: 1, key2: 'value2'}
________________________________________________________________________________